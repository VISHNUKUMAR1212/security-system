
// PIC16F877A Configuration Bit Settings

// 'C' source line config statements

// CONFIG
#pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = OFF      // Brown-out Reset Enable bit (BOR disabled)
#pragma config LVP = OFF        // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3 is digital I/O, HV on MCLR must be used for programming)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#define _XTAL_FREQ 20000000
#define   RS  RE0
#define EN  RE1 

unsigned char keypad_scan();
void lcdinit();
void cmd(unsigned int i);
void data(unsigned int j);
char ar[20]={"PSWD CORRECT"};
unsigned char k;
void lcd_string(char *);

int count;
int val;
void uartinit();
#define x1 RB0 
#define x2 RB1 
#define  x3 RB2 
#define x4 RB3 
#define y1 RB4 
#define y2  RB5 
#define y3 RB6 
#define y4 RB7 
void main(){
    lcdinit();
    cmd(0x80);
   // lcd_string(ar);
    uartinit();
    ADCON1=0x0f;
    TRISE=0x00;
   // TRISC=0x00;
   // PORTC=0x00;
    TRISD=0x00;
    PORTD=0x00;
    TRISB=0x0f;
  //  OPTION_REG&=0x7f;
     
     cmd(0x80);
    while(1){
    TXREG=keypad_scan();
    data(TXREG);
    __delay_ms(100);
    
    }}

void lcd_string(char *str)
{
    while(*str++)
    {
        data(*str);
    }
}
    

void uartinit(){
    TRISC=0xc0;
    PORTC=0x00;
    OPTION_REG&=0x7f;
    //TRISB=0xf0;
    //PORTB=0x00;
    TXSTA=0X20;
    RCSTA=0x90;
    SPBRG=0X09;
    
}
void lcdinit(){
    ADCON1=0x0f;
    TRISE=0x00;
   // TRISC=0x00;
   // PORTC=0x00;
    TRISD=0x00;
    PORTD=0x00;
    TRISB=0x0f;
    __delay_ms(20);
    cmd(0x38);//8bit 5x7dots
    cmd(0x0c);//dison curoff
    cmd(0x06);
    cmd(0x01);//clear display
    
    //entry mode set
}
void data(unsigned int j){
    RS=1;
    PORTD=j;
    EN=1;
    __delay_ms(100);
    EN=0;
    __delay_ms(100);
    
}
      
void cmd(unsigned int i){
    RS=0;
    PORTD=i;
  
    EN=1;
    __delay_ms(100);
    EN=0;
    __delay_ms(100);
     
    
}
unsigned char keypad_scan(){
    while(count!=4){
        
    y1=0,y2=1,y3=1,y4=1;
    if(x1==0) {
        __delay_ms(1);
        count ++;
        return '7';
    }
     if(x2==0) {
        __delay_ms(1);
        count ++;
        return '4';
    }
     if(x3==0) {
        __delay_ms(100);
        count ++;
        return '1';
    }
     if(x4==0) {
        __delay_ms(1);
        
         cmd(0X01);
    }
     y1=1,y2=0,y3=1,y4=1;
    if(x1==0) {
        __delay_ms(1);count ++;
        return '8';
    }
     if(x2==0) {
        __delay_ms(1);count ++;
        return '5';
    }
     if(x3==0) {
        __delay_ms(1);count ++;
        return '2';
    }
     if(x4==0) {
        __delay_ms(1);count ++;
        return '0';
    }
      y1=1,y2=1,y3=0,y4=1;
    if(x1==0) {
        __delay_ms(1);count ++;
        return '9';
    }
     if(x2==0) {
        __delay_ms(1);count ++;
        return '6';
    }
     if(x3==0) {
        __delay_ms(1);count ++;
        return '3';
    }
     if(x4==0) {
        __delay_ms(1);count ++;
        return '=';
    }
       y1=1,y2=1,y3=1,y4=0;
    if(x1==0) {
        __delay_ms(1);count ++;
        return '/';
    }
     if(x2==0) {
        __delay_ms(1);count ++;
        return '*';
    }
     if(x3==0) {
        __delay_ms(1);count ++;
        return '-';
    }
     if(x4==0) {
        __delay_ms(1);count ++;
        return '+';
    }
    }
    y1=0,y2=1,y3=1,y4=1;
 if(x4==0)
 {
     
 while(count==4) {
       
     
       cmd(0x01);
       
        count=0;
              
 }}}
